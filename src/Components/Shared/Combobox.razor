@typeparam TValue

<div x-data="{
        open: false,
        toggle() {
            if (this.open) {
                return this.close()
            }
            this.$refs.button.focus()
            this.open = true
        },
        close(focusAfter) {
            if (!this.open) return
            this.open = false
            focusAfter && focusAfter.focus()
        }
    }"
     x-on:keydown.escape.prevent.stop="close($refs.button)"
     x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
     x-id="['dropdown-button']" style="position: relative;">
    <div class="option__value">
        <InputField TValue="TValue"
                      Value="Value"
                      ValueChanged="ValueChanged"
                      AdditionalAttributes="AdditionalAttributes" />
        <button x-ref="button"
                x-on:click="toggle()"
                :aria-expanded="open"
                :aria-controls="$id('dropdown-button')"
                type="button"
                class="btn btn--square btn--compact">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path fill="currentColor"
                      d="M12 15.25a1 1 0 0 1-.7-.29l-4.58-4.5A1.011 1.011 0 0 1 8.12 9L12 12.85L15.88 9a1 1 0 1 1 1.4 1.42L12.7 15a1 1 0 0 1-.7.25"/>
            </svg>
        </button>
    </div>
    <div x-ref="panel"
         x-show="open"
         x-transition.origin.top
         x-on:click.outside="close($refs.button)"
         :id="$id('dropdown-button')"
         x-cloak
         class="dropdown dropdown--combobox">
        @foreach (var option in Options)
        {
            <button x-on:click="close($refs.button)" class="btn btn--dropdown"
                    @onclick="() => SelectOptionTask(option)">
                @option.DisplayText
                @if (option.Dlc) { <span class="badge">DLC</span> }
            </button>
        }
    </div>
</div>

@code {

    [Parameter] public TValue Value { get; set; }

    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter] public List<SelectOption<TValue>> Options { get; set; } = [];

    /*[Parameter] public TValue Min { get; set; }
    [Parameter] public TValue Max { get; set; }*/

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private async Task SelectOptionTask(SelectOption<TValue> option)
    {
        Value = option.Value;
        await ValueChanged.InvokeAsync(Value);
    }

    public class SelectOption<T>
    {
        public T Value { get; set; }
        public string DisplayText { get; set; }
        public bool Dlc { get; set; }
    }

}