@typeparam TValue

<input @bind="Value"
       @bind:event="oninput"
       @attributes="AdditionalAttributes"
       @onchange="OnInputChanged"
       placeholder="None"
       class="input--stripped" />

@code {
    [Parameter] public TValue Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public TValue Min { get; set; }
    [Parameter] public TValue Max { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        if (BindConverter.TryConvertTo<TValue>(e.Value, System.Globalization.CultureInfo.CurrentCulture, out var convertedValue))
        {
            if (typeof(TValue) == typeof(int) || typeof(TValue) == typeof(uint) || typeof(TValue) == typeof(float))
            {
                dynamic value = convertedValue;
                dynamic min = Min.Equals(default(TValue)) ? GetDefaultMinValue() : Min;
                dynamic max = Max.Equals(default(TValue)) ? GetDefaultMaxValue() : Max;

                if (value < min)
                {
                    value = min;
                }
                else if (value > max)
                {
                    value = max;
                }

                convertedValue = (TValue)value;
            }

            Value = convertedValue;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private dynamic GetDefaultMinValue()
    {
        if (typeof(TValue) == typeof(int)) return int.MinValue;
        if (typeof(TValue) == typeof(uint)) return uint.MinValue;
        if (typeof(TValue) == typeof(float)) return float.MinValue;
        return default(TValue);
    }

    private dynamic GetDefaultMaxValue()
    {
        if (typeof(TValue) == typeof(int)) return int.MaxValue;
        if (typeof(TValue) == typeof(uint)) return uint.MaxValue;
        if (typeof(TValue) == typeof(float)) return float.MaxValue;
        return default(TValue);
    }
}